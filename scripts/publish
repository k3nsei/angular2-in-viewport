#!/bin/bash

rootSrc="$(dirname "$0")/.."
pkgDest="$rootSrc/dist/ng-in-viewport"

cleanDestDir() {
  [ -d "$pkgDest" ] && rm -rf "$pkgDest"
}

buildLibrary() {
  yarn --cwd="$rootSrc" run build:lib > /dev/null 2>&1
}

setVersion() {
  local pkgJson="$pkgDest/package.json"
  local versionNumber=$1

  [ ! -f "$pkgJson" ] && echo "Missing package.json file in \`$pkgJson\`" && exit 1;

  if [ -z "$versionNumber" ]; then
    read -r -p "Enter new package version: " versionNumber
  fi

  if [[ $versionNumber =~ ^[0-9]+(\.[0-9]{1,3})(\.[0-9]{1,3})(\-(alpha|beta|next|rc)\.[0-9]{1,3})?$ ]]; then
    yarn --cwd="$pkgDest" version --new-version  "$versionNumber" --no-git-tag-version > /dev/null 2>&1
  else
    echo "Error: \`$versionNumber\` is not correct semver version"
    exit 1
  fi
}

copyLicense() {
  local licenseSrc="$rootSrc/LICENSE"
  local licenseDest="$pkgDest/LICENSE"

  [ -f "$licenseSrc" ] && cp "$licenseSrc" "$licenseDest"
}

copyReadme() {
  local readmeSrc="$rootSrc/README.md"
  local readmeDest="$pkgDest/README.md"

  [ -f "$readmeSrc" ] && cp  "$readmeSrc" "$readmeDest"
}

copyDocumentation() {
  local documentationSrc="$rootSrc/docs"
  local documentationDest="$pkgDest/docs/"

  [ -d "$documentationSrc" ] && cp -R "$documentationSrc" "$documentationDest"
}

cleanDestDir
buildLibrary

if [ $? -eq 0 ]; then
  setVersion "$1"
  copyLicense
  copyReadme
  copyDocumentation

  echo "The library has been built successfully"
  exit 0
else
  echo "Library building failed"
  exit 1
fi
